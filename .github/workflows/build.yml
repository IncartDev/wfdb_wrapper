name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
  WIN_SRV_PATH: "//incart.local/FS/GUEST/#KTAuto"
  LIN_SRV_PATH: "/home/root2/#KTAuto"
  ARM64_SRV_PATH: "/root/actions-output/#KTAuto"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [self-hosted, '${{ matrix.os }}', '${{ matrix.arch }}']
    strategy:
      matrix:
        arch: [X64, ARM64]
        os: [Linux, Windows]
    steps:
    
      # - name: Add ssh keys
      #   uses: webfactory/ssh-agent@v0.5.1
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_GOSTSTAT_SUBMODULE }}
          
      - uses: actions/checkout@v3

      - name: Configure CMake for Windows # отдельная настройка, т.к. на винде другой компилятор - msvc
        # Visual Studio должна быть установлена на билд-машине = опять танцы с бубнами... надо делать докер для сборки билд-машин
        if: matrix.os == 'Windows'
        run: cmake -G "Visual Studio 16 2019" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Configure CMake for Linux
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        if: matrix.os == 'Linux'
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
        
      - uses: actions/upload-artifact@v3
        with:
          name: WFDB-Wrapper-${{ matrix.os }} # ! имя надо разливать по версиям из матрицы
          path: ./ # для теста пока просто положим исходники
                    
      - uses: actions/download-artifact@v3
        with:
          name: WFDB-Wrapper-${{ matrix.os }}
          path: artifacts/wfdb-wrapper

      - name: Linux ARM64 - Add artifact to server
        shell: bash
        if: ${{ matrix.os == 'Linux' && matrix.arch == 'ARM64' }}
        run: |
          rm -rf ${{env.LIN_SRV_PATH}}/for-build/${{ matrix.os }}/backend/wfdb_wrapper
          cp -r ./artifacts/wfdb-wrapper/build/Release ${{env.LIN_SRV_PATH}}/for-build/${{ matrix.os }}/backend/wfdb_wrapper
          
      - name: Linux X64 - Add artifact to server
        shell: bash
        if: ${{ matrix.os == 'Linux' && matrix.arch == 'ARM64' }}
        run: |
          rm -rf ${{env.ARM64_SRV_PATH}}/for-build/${{ matrix.os }}/backend/wfdb_wrapper
          cp -r ./artifacts/wfdb-wrapper/build/Release ${{env.ARM64_SRV_PATH}}/for-build/${{ matrix.os }}/backend/wfdb_wrapper
          
      - name: Windows - Add artifact to server
        shell: bash
        if: matrix.os == 'Windows'
        run: |
          rm -rf ${{env.WIN_SRV_PATH}}/for-build/${{ matrix.os }}/backend/wfdb_wrapper
          cp -r ./artifacts/wfdb-wrapper/build/Release ${{env.WIN_SRV_PATH}}/for-build/${{ matrix.os }}/backend/wfdb_wrapper
          

          
          
      
